head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	97.03.27.04.45.12;	author mansbrid;	state Exp;
branches;
next	1.3;

1.3
date	97.03.27.03.53.40;	author mansbrid;	state Exp;
branches;
next	1.2;

1.2
date	95.01.25.01.46.47;	author mansbrid;	state Exp;
branches;
next	1.1;

1.1
date	94.09.12.06.42.45;	author mansbrid;	state Exp;
branches;
next	;


desc
@Initial version for matlab4.2 (see matlab4.1 directory for earlier versions).
@


1.4
log
@Fixed up bug whereby if all values in a column were negative then nanmax
would think that the column was filled with NaNs.  This was because I used
realmin as the smallest possible real when it was in fact the smallest
positive real.  I have changed it to use -realmax now.
@
text
@function [z, i] = nanmax(x, y)
% NANMAX   Maximum value of matrix columns or two matrices, ignoring NaNs
%===================================================================
% NANMAX   $Revision: 1.3 $
%
% function [z, i] = nanmax(x, y)
%
% DESCRIPTION:
%    Maximum value of matrix columns or two matrices.  It is identical
%    to the built-in function MAX but is able to ignore NaNs.
% 
% INPUT:
%    x    = vector or matrix 
%    y    = vector or matrix of same order as x
%
% OUTPUT:
% If there is only one input argument:
%    z    = column-wise maximum of x.  If x a vector then y = max(x)
%           ignoring all NaNs.  Thus a max of actual data values.
%    i    = the row number of the maximum in each column of x.
% If there are two input arguments:
%    z    = a matrix the same size as X and Y with the largest elements
%           taken from X or Y. When complex, the magnitude MAX(ABS(X))
%           is used.  NaNs are ignored and if X and Y have a NaN in the
%           same position then Z will also have a NaN there.
%
% EXAMPLES:  x = [ 1  2  3;
%                 3 NaN 5];
%            z = nanmax(x)
%            z = 1  2  3
%
%            x = [ 1   2   3;
%                NaN  10 NaN;
%                 -2 NaN   7;
%                NaN NaN NaN];
%
%            y = [ 6 NaN -3;
%                NaN  -3  4;
%                  3 NaN  7;
%                NaN  -8  2];
%            z = nanmax(x, y)
%            z = 
%                  1     2    -3
%                NaN    -3     4
%                 -2   NaN     7
%                NaN    -8     2
%
% CALLER:   general purpose
% CALLEE:   none
%
% AUTHOR:   Jim Mansbridge
%==================================================================

% $Id: nanmax.m,v 1.3 1997/03/27 04:34:22 mansbrid Exp $
% 
%--------------------------------------------------------------------
  
if nargin == 1
 
  % Replace each Nan with the smallest possible real (-realmax) before
  % calling the built-in function max.  Note that checks must be carried
  % out for the special cases when there are no NaNs or a column is
  % filled with Nans.  In the case where a column is filled with Nans we
  % rely on the fact that matlab is smart enough to be able to get
  % exactly -realmax when it takes -realmax*ones(size(ff_x)).
  
  ff_x = find(isnan(x));
  if length(ff_x) == 0
    [z, i] = max(x);
  else
    x(ff_x) = -realmax*ones(size(ff_x));
    [z, i] = max(x);
    ff = find(z == -realmax);
    if length(ff) ~= 0
      z(ff) = NaN*ones(size(ff));
      i(ff) = NaN*ones(size(ff));
    end
  end
    
elseif nargin == 2
  
  if sum(abs(size(x) - size(y))) ~= 0
    error('x and y must be the same size in nanmax(x, y)')
  end
  
  %Find the NaNs in X and Y.  Replace each NaN in X with the
  %corresponding element in Y; then reverse the roles.  Then call the
  %built in function MAX.  Note that if both matrices have a NaN in a
  %given position then X and Y still end up with a NaN in this position
  %and MAX will return a NaN in the position for the matrix of maximum
  %values.
  
  i_nanx = isnan(x);
  i_nany = isnan(y);
  x(i_nanx) = y(i_nanx);
  y(i_nany) = x(i_nany);
  z = max(x, y);
      
else
  error('nanmax must have 1 or 2 input arguments')
end
@


1.3
log
@Further generalised and simplified.
@
text
@d4 1
a4 1
% NANMAX   $Revision: 1.2 $
d54 1
a54 1
% $Id: nanmax.m,v 1.2 1997/03/04 07:49:23 mansbrid Exp $
d60 6
a65 6
  % Replace each Nan with the largest possible real before calling the
  % built-in function max.  Note that checks must be carried out for the
  % special cases when there are no NaNs or a column is filled with
  % Nans.  In the case where a column is filled with Nans we rely on the
  % fact that matlab is smart enough to be able to get exactly realmin
  % when it takes realmin*ones(size(ff_x)).
d71 1
a71 1
    x(ff_x) = realmin*ones(size(ff_x));
d73 1
a73 1
    ff = find(z == realmin);
@


1.2
log
@alter comments.
@
text
@d1 2
a2 2
function z = nanmax(x, y)
% NANMAX     Maximum value of matrix columns or two matrices, ignoring NaNs
d4 1
a4 1
% NANMAX   1.1   92/03/23
d6 1
a6 1
% function z = nanmax(x, y)
d9 2
a10 1
%    Maximum value of matrix columns or two matrices, ignoring NaNs
d20 1
d30 1
a30 1
%            z = 3  2  5
d43 3
a45 3
%                  6     2     3
%                NaN    10     4
%                  3   NaN     7
d51 1
a51 2
% AUTHOR:   Phil Morgan 3-02-92
%           Jim Mansbridge 29-07-94 added (x,y) input ala max MATLAB4.2
d54 1
a54 1
% @@(#)nanmax.m   1.1   92/03/23
d57 1
a57 1

d59 7
d67 11
a77 16
  [m,ncols]=size(x);

  % IF A ROW VECTOR THEN TRANSPOSE TO COLUMN VECTOR
  if m == 1
    x = x';
    ncols = 1;
  end

  % FOR EACH COLUMN FIND MAX EXCLUDING NaNs
  for icol = 1:ncols
    good    = find( ~isnan(x( :,icol)) );
    if length(good)>0
      z(icol) = max( x(good,icol) );
    else
      z(icol) = NaN;
    end %if
d79 1
a79 1

d98 1
d100 1
a100 1
  error('nanmax must have 1 or 2 arguments')
a101 3

   

@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
% NANMAX   Maximum value of matrix columns or two matrices, ignoring NaNs
@
